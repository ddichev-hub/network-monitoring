# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 10000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "3s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "1s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://influxdb:8086"] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "influx" # required

  insecure_skip_verify = true

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512


###############################################################################
#                                  INPUTS                                     #
###############################################################################


# # gNMI telemetry input plugin
 [[inputs.gnmi]]
#  ## Address and port of the gNMI GRPC server
    addresses = ["%%TELEGRAF_GNMI_NODE1%%:%%TELEGRAF_GNMI_PORT%%", "%%TELEGRAF_GNMI_NODE2%%:%%TELEGRAF_GNMI_PORT%%", "%%TELEGRAF_GNMI_NODE3%%:%%TELEGRAF_GNMI_PORT%%", "%%TELEGRAF_GNMI_NODE4%%:%%TELEGRAF_GNMI_PORT%%"]
  #5164_19, 5170_93, 5164-0021, 5164_20  
#
#  ## define credentials
    username = "%%TELEGRAF_GNMI_USERNAME%%"
    password = "%%TELEGRAF_GNMI_PWD%%"
#
#  ## gNMI encoding requested (one of: "proto", "json", "json_ietf", "bytes")
    encoding = "proto"
#
#  ## redial in case of failures after
    redial = "10s"
#
#  ## enable client-side TLS and define CA to authenticate the device
#    tls_enable = true
    enable_tls = true
    tls_ca = "/etc/telegraf/ca.cert.pem"
    insecure_skip_verify = true
#
#  ## define client-side TLS certificate & key to authenticate to the device
    tls_cert = "/etc/telegraf/client.cert.pem"
    tls_key = "/etc/telegraf/client.key.pem"
#
#
  #  tls_cipher_suites = ["TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"]
    name_override = "saos10xgnmi_onchange"
    updates_only = true   

  [[inputs.gnmi.subscription]]
    name = "hostname-change"
    origin = "ciena-system"
    path = "/ciena-sys:hostname-change"
    subscription_mode = "on_change"

  [[inputs.gnmi.subscription]]
    name = "restart-events"
    origin = "ciena-system"
    path = "/ciena-sys:system-restart-notification"
    subscription_mode = "on_change"

  [[inputs.gnmi.subscription]]
    name = "alarm-state-change"
    origin = "ietf-alarms"
    path = "/al:alarm-notification"
    subscription_mode = "on_change"



# # gNMI telemetry input plugin
 [[inputs.gnmi]]
#  ## Address and port of the gNMI GRPC server
    addresses = ["%%TELEGRAF_GNMI_NODE1%%:%%TELEGRAF_GNMI_PORT%%", "%%TELEGRAF_GNMI_NODE2%%:%%TELEGRAF_GNMI_PORT%%", "%%TELEGRAF_GNMI_NODE3%%:%%TELEGRAF_GNMI_PORT%%", "%%TELEGRAF_GNMI_NODE4%%:%%TELEGRAF_GNMI_PORT%%"]
  #5164_19, 5170_93, 5164-0021, 5164_20
#
#  ## define credentials
    username = "%%TELEGRAF_GNMI_USERNAME%%"
    password = "%%TELEGRAF_GNMI_PWD%%"
#
#  ## gNMI encoding requested (one of: "proto", "json", "json_ietf", "bytes")
    encoding = "proto"
#
#  ## redial in case of failures after
    redial = "10s"
#
#  ## enable client-side TLS and define CA to authenticate the device
#    tls_enable = true
    enable_tls = true
    tls_ca = "/etc/telegraf/ca.cert.pem"
    insecure_skip_verify = true
#    tls_cipher_suites = ["TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"]
#
#  ## define client-side TLS certificate & key to authenticate to the device
    tls_cert = "/etc/telegraf/client.cert.pem"
    tls_key = "/etc/telegraf/client.key.pem"
#
#
     name_override = "saos10xgnmi_sample"
     updates_only = false



  [[inputs.gnmi.subscription]]
    name = "physical-if-stats"
    origin = "ciena-openconfig-interfaces"
    path = "/cn-if:interface-telemetry-state/interface-counters[interface-type=any]/interfaces[if-name=*]/counters"
    subscription_mode = "sample"
    sample_interval = "60s"
