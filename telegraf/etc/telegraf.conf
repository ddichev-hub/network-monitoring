# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "5s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 10000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "1s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://influxdb:8086"] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "influx" # required
  # Precision of writes, valid values are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"
  ## Organization is the name of the organization you wish to write to; must exist.
  #organization = "$DOCKER_INFLUXDB_INIT_ORG"
  
  ## Destination bucket to write into.
  #bucket = "$DOCKER_INFLUXDB_INIT_BUCKET"

  ## Token for authentication.
  #token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN"

  insecure_skip_verify = true

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"
  #username = "admin"
  #password = "admin1234"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512


###############################################################################
#                                  INPUTS                                     #
###############################################################################
# Statsd Server
# Monitors internet speed in the network
[[inputs.ping]]
  interval = "5s"
  urls = ["192.168.1.1", "google.com"]
  count = 4
  ping_interval = 1.0
  timeout = 2.0

[[inputs.statsd]]
  ## Protocol, must be "tcp", "udp4", "udp6" or "udp" (default=udp)
  protocol = "udp"

  ## MaxTCPConnection - applicable when protocol is set to tcp (default=250)
  max_tcp_connections = 250

  ## Enable TCP keep alive probes (default=false)
  tcp_keep_alive = false

  ## Specifies the keep-alive period for an active network connection.
  ## Only applies to TCP sockets and will be ignored if tcp_keep_alive is false.
  ## Defaults to the OS configuration.
  # tcp_keep_alive_period = "2h"

  ## Address and port to host UDP listener on
  service_address = ":8125"

  ## The following configuration options control when telegraf clears it's cache
  ## of previous values. If set to false, then telegraf will only clear it's
  ## cache when the daemon is restarted.
  ## Reset gauges every interval (default=true)
  delete_gauges = true
  ## Reset counters every interval (default=true)
  delete_counters = true
  ## Reset sets every interval (default=true)
  delete_sets = true
  ## Reset timings & histograms every interval (default=true)
  delete_timings = true

  ## Percentiles to calculate for timing & histogram stats
  percentiles = [90]

  ## separator to use between elements of a statsd metric
  metric_separator = "_"

  ## Parses tags in the datadog statsd format
  ## http://docs.datadoghq.com/guides/dogstatsd/
  parse_data_dog_tags = false

  ## Statsd data translation templates, more info can be read here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md#graphite
  # templates = [
  #     "cpu.* measurement*"
  # ]

  ## Number of UDP messages allowed to queue up, once filled,
  ## the statsd server will start dropping packets
  allowed_pending_messages = 10000

  ## Number of timing/histogram values to track per-measurement in the
  ## calculation of percentiles. Raising this limit increases the accuracy
  ## of percentiles but also increases the memory usage and cpu time.
  percentile_limit = 1000

  ## Maximum socket buffer size in bytes, once the buffer fills up, metrics
  ## will start dropping.  Defaults to the OS default.
  # read_buffer_size = 65535

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## Comment this line if you want the raw CPU time metrics
  fielddrop = ["time_*"]


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points = ["/"]

  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration


# Read metrics about memory usage
[[inputs.mem]]
  # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration


# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

# Read metrics about network interface usage
[[inputs.net]]
  # collect data only about specific interfaces
  # interfaces = ["eth0"]


[[inputs.netstat]]
  # no configuration

[[inputs.interrupts]]
  # no configuration

[[inputs.linux_sysctl_fs]]
  # no configuration

# # gNMI telemetry input plugin
 [[inputs.gnmi]]
#  ## Address and port of the gNMI GRPC server
  addresses = ["192.0.0.1:6702", "192.0.0.2:6702", "192.0.0.3:6702", "192.0.0.4:6702"]
#
#  ## define credentials
  username = "diag"
  password = "ciena123"
#
#  ## gNMI encoding requested (one of: "proto", "json", "json_ietf", "bytes")
  encoding = "proto"
#
#  ## redial in case of failures after
  redial = "10s"
#
#  ## enable client-side TLS and define CA to authenticate the device
  enable_tls = true
  tls_ca = "/etc/telegraf/ca.cert.pem"
  insecure_skip_verify = true
#
#  ## define client-side TLS certificate & key to authenticate to the device
  tls_cert = "/etc/telegraf/client.cert.pem"
  tls_key = "/etc/telegraf/client.key.pem"
#
#  ## gNMI subscription prefix (optional, can usually be left empty)
#  ## See: https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#222-paths
#  # origin = ""
#  # prefix = ""
#  # target = ""
#
#  ## Define additional aliases to map telemetry encoding paths to simple measurement names
  #[inputs.gnmi.aliases]
#  #  ifcounters = "openconfig:/interfaces/interface/state/counters"
#   ifcounters = "/oc-if:interfaces/oc-if:interface/oc-if:state/oc-if:counters"
#
   name_override = "saos10xgnmi"
   updates_only = true   

#  [[inputs.gnmi.subscription]]
##   ## Name of the measurement that will be emitted
#   name = "ifcounters"
#
##
##   ## Origin and path of the subscription
##   ## See: https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#222-paths
##   ##
##   ## origin usually refers to a (YANG) data model implemented by the device
##   ## and path to a specific substructure inside it that should be subscribed to (similar to an XPath)
##   ## YANG models can be found e.g. here: https://github.com/YangModels/yang/tree/master/vendor/cisco/xr
#   origin = "openconfig-interfaces"
##
#   path = "/oc-if:interfaces/oc-if:interface/oc-if:state/oc-if:counters"
##
##   # Subscription mode (one of: "target_defined", "sample", "on_change") and interval
#   subscription_mode = "sample"
#   sample_interval = "10s"
##
##   ## Suppress redundant transmissions when measured values are unchanged
##   # suppress_redundant = false
##
##   ## If suppression is enabled, send updates at least every X seconds anyway
##   # heartbeat_interval = "60s"
##
 [[inputs.gnmi.subscription]]
  name = "ifcounters"
  origin = "openconfig-interfaces"
  path = "/oc-if:interfaces/oc-if:interface[name=5]/oc-if:state/oc-if:counters"
  subscription_mode = "sample"
  sample_interval = "10s"

  [[inputs.gnmi.subscription]]
   name = "ifcounters"
   origin = "openconfig-interfaces"
   path = "/oc-if:interfaces/oc-if:interface[name=8]/oc-if:state/oc-if:counters"
   subscription_mode = "sample"
   sample_interval = "10s"   

  [[inputs.gnmi.subscription]]
   name = "ifcounters"
   origin = "openconfig-interfaces"
   path = "/oc-if:interfaces/oc-if:interface[name=10]/oc-if:state/oc-if:counters"
   subscription_mode = "sample"
   sample_interval = "10s"   


  [[inputs.gnmi.subscription]]
   name = "ifcounters"
   origin = "openconfig-interfaces"
   path = "/oc-if:interfaces/oc-if:interface[name=31]/oc-if:state/oc-if:counters"
   subscription_mode = "sample"
   sample_interval = "10s"  

  [[inputs.gnmi.subscription]]
   name = "ifcounters"
   origin = "openconfig-interfaces"
   path = "/oc-if:interfaces/oc-if:interface[name=32]/oc-if:state/oc-if:counters"
   subscription_mode = "sample"
   sample_interval = "10s"     

  [[inputs.gnmi.subscription]]
   name = "ifcounters"
   origin = "openconfig-interfaces"
   path = "/oc-if:interfaces/oc-if:interface[name=33]/oc-if:state/oc-if:counters"
   subscription_mode = "sample"
   sample_interval = "10s"  

  [[inputs.gnmi.subscription]]
   name = "if-events"
   origin = "ciena-openconfig-interfaces"
   path = "/cn-if:interface-events/interface-event/name-list/event-list"
   subscription_mode = "sample"
   sample_interval = "10s"  

  [[inputs.gnmi.subscription]]
   name = "xcvr-events"
   origin = "ciena-packet-xcvr"
     path = "/xcvr:xcvr-events/xcvr-event[name='*']/event-list[event-type=any]"
   subscription_mode = "on_change"
  
  [[inputs.gnmi.subscription]]
   name = "logical-port-events"
   origin = "ciena-mef-logical-port"
     path = "/mef-logical-port:logical-port-events/logical-port-event[name='*']/event-list[logical-port-event-type=any]"
   subscription_mode = "on_change"

  #[[inputs.gnmi.subscription]]
  # name = "alarm-notification"
  # origin = "ietf-alarms"
  # path = "/al:alarm-notification"
  # subscription_mode = "on_change"
 
 # [[inputs.gnmi.subscription]]
 #  name = "hostname-change"
 #  origin = "ciena-system"
 #  path = "/ciena-sys:hostname-change"
 #  subscription_mode = "on_change"

  #[[inputs.gnmi.subscription]]
  # name = "logical_port"
  # origin = "ciena-mef-logical-port"
  # path = "/mef-logical-port:logical-port-events/logical-port-event[name=10]/event-list[logical-port-event-type=any]"
  # subscription_mode = "on_change"

  [[inputs.gnmi.subscription]]
   name = "hostname_change"
   origin = "ciena-system"
   path = "/ciena-sys:hostname-change"
   subscription_mode = "sample"
   sample_interval = "10s"   

 # [[inputs.gnmi.subscription]]
 #  name = "interface_events"
 #  origin = "ciena-openconfig-interfaces"
 #  path = "/cn-if:interface-events/interface-event/name-list/event-list"
 #  subscription_mode = "sample"
 #  sample_interval = "10s"   
#
 # [[inputs.gnmi.subscription]]
 #  name = "mef_logical_port"
 #  origin = "ciena-mef-logical-port"
 #  path = "/mef-logical-port:logical-port-events/logical-port-event[name=32]/event-list[logical-port-event-type=any]"
 #  subscription_mode = "on_change"

